from utils import randbool, randcell, randcell2
import config


class Map:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫
    EMPTY = 0      # ‚ùé –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ
    TREE = 1       # üå≤ –î–µ—Ä–µ–≤–æ
    RIVER = 2      # üåä –†–µ–∫–∞
    HOSPITAL = 3   # üè• –ì–æ—Å–ø–∏—Ç–∞–ª—å
    SHOP = 4       # üè™ –ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π
    FIRE = 5       # üî• –û–≥–æ–Ω—åüè•üè™üî•üå≤

    # –°–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–µ—Ç–æ–∫
    CELL_SYMBOLS = 'üü©üíü‚ùéüî≤üî≥üåä‚ùé‚ùé‚ùé‚ùé'

    def __init__(self, width: int, height: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

        Args:
            width (int): –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è
            height (int): –í—ã—Å–æ—Ç–∞ –ø–æ–ª—è
        """
        self.width = width
        self.height = height
        self.cells = [[self.EMPTY] * width for _ in range(height)]

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        self.generate_forest(config.FOREST_DENSITY, config.MAX_PROBABILITY)
        for _ in range(config.RIVER_COUNT):
            self.generate_river(config.RIVER_LENGTH)
        self.generate_building(self.SHOP)
        self.generate_building(self.HOSPITAL)

    def check_bounds(self, x: int, y: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è

        Args:
            x (int): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
            y (int): –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y

        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è
        """
        return 0 <= x < self.height and 0 <= y < self.width

    def print_map(self, helicopter, clouds) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å

        Args:
            helicopter (Helicopter): –û–±—ä–µ–∫—Ç –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞
            clouds (Clouds): –û–±—ä–µ–∫—Ç –æ–±–ª–∞–∫–æ–≤
        """
        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ä—Ç—ã
        print('‚ùé' * (self.width + 2))

        for row_idx in range(self.height):
            print('‚ùé', end='')  # –õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞

            for col_idx in range(self.width):
                cell_type = self.cells[row_idx][col_idx]

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–ª–∞–∫–æ–≤ (–∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)‚õàÔ∏è‚òÅÔ∏è
                cloud_type = clouds.cells[row_idx][col_idx]
                if cloud_type == 1:
                    print('‚ùé', end='')
                elif cloud_type == 2:
                    print('‚ùé', end='')

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞
                elif helicopter.x == row_idx and helicopter.y == col_idx:
                    print('üöÅ', end='')

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç—ã
                elif 0 <= cell_type < len(self.CELL_SYMBOLS):
                    print(self.CELL_SYMBOLS[cell_type], end='')

            print('‚ùé')  # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞

        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ä—Ç—ã
        print('‚ùé' * (self.width + 2))

    def generate_forest(self, probability: int, max_probability: int) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ

        Args:
            probability (int): –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞
            max_probability (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        """
        for row in range(self.height):
            for col in range(self.width):
                if randbool(probability, max_probability):
                    self.cells[row][col] = self.TREE

    def generate_river(self, length: int) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã

        Args:
            length (int): –î–ª–∏–Ω–∞ —Ä–µ–∫–∏ –≤ –∫–ª–µ—Ç–∫–∞—Ö
        """
        x, y = randcell(self.width, self.height)
        self.cells[x][y] = self.RIVER

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–∫—É, –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
        while length > 0:
            x, y = randcell2(x, y)
            if self.check_bounds(x, y):
                self.cells[x][y] = self.RIVER
                length -= 1

    def generate_building(self, building_type: int) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–µ

        Args:
            building_type (int): –¢–∏–ø –∑–¥–∞–Ω–∏—è (SHOP –∏–ª–∏ HOSPITAL)
        """
        x, y = randcell(self.width, self.height)

        # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É
        while self.cells[x][y] != self.EMPTY:
            x, y = randcell(self.width, self.height)

        self.cells[x][y] = building_type

    def add_tree(self) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É"""
        x, y = randcell(self.width, self.height)
        if self.cells[x][y] == self.EMPTY:
            self.cells[x][y] = self.TREE

    def add_fire(self) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–≥–æ–Ω—å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ—Ä–µ–≤–æ"""
        x, y = randcell(self.width, self.height)
        if self.cells[x][y] == self.TREE:
            self.cells[x][y] = self.FIRE

    def update_fires(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∂–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ"""
        # –ì–∞—Å–∏–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∂–∞—Ä—ã
        for row in range(self.height):
            for col in range(self.width):
                if self.cells[row][col] == self.FIRE:
                    self.cells[row][col] = self.EMPTY

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∂–∞—Ä—ã
        for _ in range(config.NEW_FIRES_COUNT):
            self.add_fire()

    def process_helicopter(self, helicopter) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ —Å –∫–ª–µ—Ç–∫–æ–π

        Args:
            helicopter (Helicopter): –û–±—ä–µ–∫—Ç –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞
        """
        cell_type = self.cells[helicopter.x][helicopter.y]

        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∫–æ–π - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∫–∞
        if cell_type == self.RIVER:
            helicopter.water_tank = helicopter.max_water

        # –¢—É—à–µ–Ω–∏–µ –ø–æ–∂–∞—Ä–∞
        elif cell_type == self.FIRE and helicopter.water_tank > 0:
            helicopter.water_tank -= 1
            helicopter.score += config.TREE_BONUS
            self.cells[helicopter.x][helicopter.y] = self.TREE

        # –ü–æ—Å–µ—â–µ–Ω–∏–µ –≥–æ—Å–ø–∏—Ç–∞–ª—è
        elif cell_type == self.HOSPITAL and helicopter.score >= config.LIFE_COST:
            helicopter.lives += 1
            helicopter.score -= config.LIFE_COST

        # –ü–æ—Å–µ—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        elif cell_type == self.SHOP and helicopter.score >= config.UPGRADE_COST:
            helicopter.max_water += 1
            helicopter.score -= config.UPGRADE_COST

    def export_data(self) -> dict:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {'cells': self.cells}

    def import_data(self, data: dict) -> None:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        self.cells = data.get(
            'cells', [[self.EMPTY] * self.width for _ in range(self.height)])
